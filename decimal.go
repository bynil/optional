// Code generated by 'go generate'

package optional

import (
	"encoding/json"
	"errors"
	"github.com/shopspring/decimal"
)

// Decimal is an optional Decimal.
type Decimal struct {
	value *decimal.Decimal
}

// NewDecimal creates an optional.Decimal from a Decimal.
func NewDecimal(v decimal.Decimal) Decimal {
	return Decimal{&v}
}

// NewDecimalFromPtr creates an optional.Decimal from a Decimal pointer.
func NewDecimalFromPtr(v *decimal.Decimal) Decimal {
	if v == nil {
		return Decimal{}
	}
	return NewDecimal(*v)
}

// Set sets the Decimal value.
func (o *Decimal) Set(v decimal.Decimal) {
	o.value = &v
}

// ToPtr returns a *Decimal of the value or nil if not present.
func (o Decimal) ToPtr() *decimal.Decimal {
	if !o.Present() {
		return nil
	}
	v := *o.value
	return &v
}

// Get returns the Decimal value or an error if not present.
func (o Decimal) Get() (decimal.Decimal, error) {
	if !o.Present() {
		var zero decimal.Decimal
		return zero, errors.New("value not present")
	}
	return *o.value, nil
}

// MustGet returns the Decimal value or panics if not present.
func (o Decimal) MustGet() decimal.Decimal {
	if !o.Present() {
		panic("value not present")
	}
	return *o.value
}

// Present returns whether or not the value is present.
func (o Decimal) Present() bool {
	return o.value != nil
}

// OrElse returns the Decimal value or a default value if the value is not present.
func (o Decimal) OrElse(v decimal.Decimal) decimal.Decimal {
	if o.Present() {
		return *o.value
	}
	return v
}

// If calls the function f with the value if the value is present.
func (o Decimal) If(fn func(decimal.Decimal)) {
	if o.Present() {
		fn(*o.value)
	}
}

func (o Decimal) MarshalJSON() ([]byte, error) {
	if o.Present() {
		return json.Marshal(o.value)
	}
	return json.Marshal(nil)
}

func (o *Decimal) UnmarshalJSON(data []byte) error {

	if string(data) == "null" {
		o.value = nil
		return nil
	}

	var value decimal.Decimal

	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	o.value = &value
	return nil
}
