// Code generated by 'go generate'

package optional

import (
	"encoding/json"
	"errors"
	"time"
)

// Time is an optional time.Time.
type Time struct {
	value *time.Time
}

// NewTime creates an optional.Time from a time.Time.
func NewTime(v time.Time) Time {
	return Time{&v}
}

// NewTimeFromPtr creates an optional.Time from a time.Time pointer.
func NewTimeFromPtr(v *time.Time) Time {
	if v == nil {
		return Time{}
	}
	return NewTime(*v)
}

// Set sets the time.Time value.
func (o *Time) Set(v time.Time) {
	o.value = &v
}

// ToPtr returns a *time.Time of the value or nil if not present.
func (o Time) ToPtr() *time.Time {
	if !o.Present() {
		return nil
	}
	v := *o.value
	return &v
}

// Get returns the time.Time value or an error if not present.
func (o Time) Get() (time.Time, error) {
	if !o.Present() {
		var zero time.Time
		return zero, errors.New("value not present")
	}
	return *o.value, nil
}

// MustGet returns the time.Time value or panics if not present.
func (o Time) MustGet() time.Time {
	if !o.Present() {
		panic("value not present")
	}
	return *o.value
}

// Present returns whether or not the value is present.
func (o Time) Present() bool {
	return o.value != nil
}

// OrElse returns the time.Time value or a default value if the value is not present.
func (o Time) OrElse(v time.Time) time.Time {
	if o.Present() {
		return *o.value
	}
	return v
}

// If calls the function f with the value if the value is present.
func (o Time) If(fn func(time.Time)) {
	if o.Present() {
		fn(*o.value)
	}
}

func (o Time) MarshalJSON() ([]byte, error) {
	if o.Present() {
		return json.Marshal(o.value)
	}
	return json.Marshal(nil)
}

func (o *Time) UnmarshalJSON(data []byte) error {

	if string(data) == "null" {
		o.value = nil
		return nil
	}

	var value time.Time

	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	o.value = &value
	return nil
}
